[{"id":"weatherweaver","user_id":"505ca38b-5d27-4d19-a71d-2fb98447c9c3","name":"WeatherWeaver","content":"\"\"\"\ntitle: WeatherWeaver - Enhanced Weather Tool\nauthor: PureGrain at SLA Ops, LLC\nauthor_url: https://github.com/PureGrain\nfunding_url: https://github.com/open-webui\nversion: 1.0.4\nlicense: MIT\nrequired_open_webui_version: 0.3.9\ndescription: Enhanced weather tool with comprehensive data from Open-Meteo (free, no API key required).\n\"\"\"\n\nimport requests\nimport urllib.parse\nimport datetime\nfrom pydantic import BaseModel, Field\nfrom typing import Optional\n\n\ndef get_city_info(city: str):\n    \"\"\"Get coordinates and timezone for a city.\"\"\"\n    url = f\"https://geocoding-api.open-meteo.com/v1/search?name={urllib.parse.quote(city)}&count=1&language=en&format=json\"\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        try:\n            data = response.json()[\"results\"][0]\n            return data[\"latitude\"], data[\"longitude\"], data[\"timezone\"]\n        except (KeyError, IndexError):\n            print(f\"City '{city}' not found\")\n            return None\n    else:\n        print(f\"Failed to retrieve data for city '{city}': {response.status_code}\")\n        return None\n\n\nwmo_weather_codes = {\n    \"0\": \"Clear sky\",\n    \"1\": \"Mainly clear\",\n    \"2\": \"Partly cloudy\",\n    \"3\": \"Overcast\",\n    \"45\": \"Foggy\",\n    \"48\": \"Depositing rime fog\",\n    \"51\": \"Light drizzle\",\n    \"53\": \"Moderate drizzle\",\n    \"55\": \"Dense drizzle\",\n    \"56\": \"Light freezing drizzle\",\n    \"57\": \"Dense freezing drizzle\",\n    \"61\": \"Slight rain\",\n    \"63\": \"Moderate rain\",\n    \"65\": \"Heavy rain\",\n    \"66\": \"Light freezing rain\",\n    \"67\": \"Heavy freezing rain\",\n    \"71\": \"Slight snow\",\n    \"73\": \"Moderate snow\",\n    \"75\": \"Heavy snow\",\n    \"77\": \"Snow grains\",\n    \"80\": \"Slight rain showers\",\n    \"81\": \"Moderate rain showers\",\n    \"82\": \"Violent rain showers\",\n    \"85\": \"Slight snow showers\",\n    \"86\": \"Heavy snow showers\",\n    \"95\": \"Thunderstorm\",\n    \"96\": \"Thunderstorm with slight hail\",\n    \"99\": \"Thunderstorm with heavy hail\",\n}\n\n\ndef fetch_weather_data(base_url, params):\n    \"\"\"Fetch data from Open-Meteo API.\"\"\"\n    try:\n        response = requests.get(base_url, params=params)\n        response.raise_for_status()\n        data = response.json()\n        if \"error\" in data:\n            return f\"Error fetching weather data: {data.get('reason', 'Unknown error')}\"\n        return data\n    except requests.RequestException as e:\n        return f\"Error fetching weather data: {str(e)}\"\n\n\ndef format_date(date_str, date_format=\"%Y-%m-%dT%H:%M\", output_format=\"%I:%M %p\"):\n    \"\"\"Format datetime string.\"\"\"\n    dt = datetime.datetime.strptime(date_str, date_format)\n    return dt.strftime(output_format)\n\n\nclass Tools:\n    class Valves(BaseModel):\n        default_location: str = Field(\n            default=\"Louisville\",\n            description=\"Default city for weather lookups (e.g., 'Louisville', 'New York', 'Tokyo')\",\n        )\n        unit_system: str = Field(\n            default=\"imperial\",\n            description=\"Default is: Imperial -- Unit system: 'imperial' (°F, mph, inches) or 'metric' (°C, km/h, mm)\",\n        )\n\n    class UserValves(BaseModel):\n        user_location: Optional[str] = Field(\n            default=None,\n            description=\"Your preferred city for weather lookups (overrides default)\",\n        )\n        user_unit_system: Optional[str] = Field(\n            default=None,\n            description=\"Your preferred units: 'imperial' or 'metric' (overrides default)\",\n        )\n\n    def __init__(self):\n        self.valves = self.Valves()\n        self.user_valves = self.UserValves()\n        print(f\"DEBUG: Initialized user_valves: {self.user_valves}\")\n        self.citation = True\n\n    def _get_location(self, city: Optional[str] = None) -> str:\n        \"\"\"Get location: provided > user preference > default.\"\"\"\n        print(\n            f\"DEBUG: city={city}, user_location={self.user_valves.user_location}, default_location={self.valves.default_location}\"\n        )\n        if city:\n            return city\n        return self.user_valves.user_location or self.valves.default_location\n\n    def _get_units(self) -> dict:\n        \"\"\"Get unit settings based on system preference.\"\"\"\n        system = self.user_valves.user_unit_system or self.valves.unit_system\n\n        if system == \"metric\":\n            return {\n                \"temperature_unit\": \"celsius\",\n                \"wind_speed_unit\": \"kmh\",\n                \"precipitation_unit\": \"mm\",\n                \"temp_symbol\": \"°C\",\n                \"wind_symbol\": \"km/h\",\n                \"precip_symbol\": \"mm\",\n            }\n        else:  # imperial\n            return {\n                \"temperature_unit\": \"fahrenheit\",\n                \"wind_speed_unit\": \"mph\",\n                \"precipitation_unit\": \"inch\",\n                \"temp_symbol\": \"°F\",\n                \"wind_symbol\": \"mph\",\n                \"precip_symbol\": \"in\",\n            }\n\n    def get_current_weather(self, city: Optional[str] = None) -> str:\n        \"\"\"\n        Get comprehensive current weather for a given city.\n        :param city: The name of the city to get the weather for (optional).\n        :return: Current weather information or error message.\n        \"\"\"\n        city = self._get_location(city)\n        if not city:\n            return \"Please provide a city name or set a default location in settings.\"\n\n        city_info = get_city_info(city)\n        if not city_info:\n            return f\"Could not find city: {city}\"\n\n        lat, lng, tmzone = city_info\n\n        base_url = \"https://api.open-meteo.com/v1/forecast\"\n        params = {\n            \"latitude\": lat,\n            \"longitude\": lng,\n            \"current\": \"temperature_2m,relative_humidity_2m,apparent_temperature,precipitation,rain,showers,snowfall,weather_code,cloud_cover,pressure_msl,wind_speed_10m,wind_direction_10m,wind_gusts_10m\",\n            \"timezone\": tmzone,\n            \"temperature_unit\": \"fahrenheit\",\n            \"wind_speed_unit\": \"mph\",\n            \"precipitation_unit\": \"inch\",\n            \"forecast_days\": 1,\n        }\n\n        data = fetch_weather_data(base_url, params)\n        if isinstance(data, str):\n            return data\n\n        current = data[\"current\"]\n        units = data[\"current_units\"]\n\n        formatted_timestamp = format_date(current[\"time\"])\n        weather_desc = wmo_weather_codes.get(str(current[\"weather_code\"]), \"Unknown\")\n\n        # Build comprehensive weather report\n        temp = round(current[\"temperature_2m\"])\n        feels_like = round(current[\"apparent_temperature\"])\n        humidity = round(current[\"relative_humidity_2m\"])\n        cloud_cover = round(current[\"cloud_cover\"])\n        pressure = round(current[\"pressure_msl\"], 1)\n        wind_speed = round(current[\"wind_speed_10m\"])\n        wind_gusts = round(current[\"wind_gusts_10m\"])\n\n        report = f\"\"\"Current weather for {city} as of {formatted_timestamp} {data['timezone_abbreviation']}:\n\n**Conditions:** {weather_desc}\n**Temperature:** {temp}°F (Feels like {feels_like}°F)\n**Humidity:** {humidity}%\n**Cloud Cover:** {cloud_cover}%\n**Pressure:** {pressure} hPa\n**Wind:** {wind_speed} mph, gusts to {wind_gusts} mph\"\"\"\n\n        # Add precipitation if present\n        precip = current.get(\"precipitation\", 0)\n        rain = current.get(\"rain\", 0)\n        showers = current.get(\"showers\", 0)\n        snowfall = current.get(\"snowfall\", 0)\n\n        if precip > 0 or rain > 0 or showers > 0 or snowfall > 0:\n            report += \"\\n**Precipitation:**\"\n            if rain > 0:\n                report += f\"\\n• Rain: {round(rain, 2)} in\"\n            if showers > 0:\n                report += f\"\\n• Showers: {round(showers, 2)} in\"\n            if snowfall > 0:\n                report += f\"\\n• Snow: {round(snowfall, 2)} in\"\n\n        return report\n\n    def get_weather_forecast(self, city: Optional[str] = None, days: int = 7) -> str:\n        \"\"\"\n        Get weather forecast for a city.\n        :param city: City name (optional - uses your default if not provided).\n        :param days: Number of days to forecast (1-16, default 7).\n        :return: Weather forecast or error message.\n        \"\"\"\n        city = self._get_location(city)\n        units = self._get_units()\n\n        if not city:\n            return \"Please provide a city name or set a default location in settings.\"\n\n        # Clamp days to valid range\n        days = max(1, min(16, days))\n\n        city_info = get_city_info(city)\n        if not city_info:\n            return f\"Could not find city: {city}\"\n\n        lat, lng, tmzone = city_info\n\n        base_url = \"https://api.open-meteo.com/v1/forecast\"\n        params = {\n            \"latitude\": lat,\n            \"longitude\": lng,\n            \"daily\": \"weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset,uv_index_max,precipitation_sum,precipitation_probability_max,wind_speed_10m_max,wind_gusts_10m_max\",\n            \"timezone\": tmzone,\n            \"temperature_unit\": units[\"temperature_unit\"],\n            \"wind_speed_unit\": units[\"wind_speed_unit\"],\n            \"precipitation_unit\": units[\"precipitation_unit\"],\n            \"forecast_days\": days,\n        }\n\n        data = fetch_weather_data(base_url, params)\n        if isinstance(data, str):\n            return data\n\n        daily = data[\"daily\"]\n\n        temp_sym = units[\"temp_symbol\"]\n        wind_sym = units[\"wind_symbol\"]\n        precip_sym = units[\"precip_symbol\"]\n\n        report_lines = [f\"**{days}-Day Weather Forecast for {city}**\\n\"]\n\n        for i in range(len(daily[\"time\"])):\n            date = daily[\"time\"][i]\n\n            # Format date nicely\n            dt = datetime.datetime.fromisoformat(date)\n            if i == 0:\n                date_str = f\"**Today** ({dt.strftime('%a, %b %d')})\"\n            elif i == 1:\n                date_str = f\"**Tomorrow** ({dt.strftime('%a, %b %d')})\"\n            else:\n                date_str = f\"**{dt.strftime('%A, %b %d')}**\"\n\n            weather_desc = wmo_weather_codes.get(\n                str(daily[\"weather_code\"][i]), \"Unknown\"\n            )\n            temp_max = round(daily[\"temperature_2m_max\"][i])\n            temp_min = round(daily[\"temperature_2m_min\"][i])\n            sunrise = format_date(daily[\"sunrise\"][i])\n            sunset = format_date(daily[\"sunset\"][i])\n            uv_index = round(daily[\"uv_index_max\"][i], 1)\n            precip_prob = round(daily[\"precipitation_probability_max\"][i])\n            precip_sum = round(daily[\"precipitation_sum\"][i], 2)\n            wind_max = round(daily[\"wind_speed_10m_max\"][i])\n            wind_gusts = round(daily[\"wind_gusts_10m_max\"][i])\n\n            day_report = f\"\\n{date_str}\\n\"\n            day_report += f\"• {weather_desc}\\n\"\n            day_report += f\"• High: {temp_max}{temp_sym} / Low: {temp_min}{temp_sym}\\n\"\n            day_report += f\"• Sunrise: {sunrise} / Sunset: {sunset}\\n\"\n            day_report += f\"• UV Index: {uv_index}\\n\"\n            day_report += f\"• Precipitation: {precip_prob}% chance\"\n            if precip_sum > 0:\n                day_report += f\" ({precip_sum} {precip_sym} expected)\"\n            day_report += (\n                f\"\\n• Wind: Max {wind_max} {wind_sym}, gusts to {wind_gusts} {wind_sym}\"\n            )\n\n            report_lines.append(day_report)\n\n        return \"\\n\".join(report_lines)\n","specs":[{"name":"_get_location","description":"Get location: provided > user preference > default.","parameters":{"properties":{"city":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null}},"type":"object"}},{"name":"_get_units","description":"Get unit settings based on system preference.","parameters":{"properties":{},"type":"object"}},{"name":"get_current_weather","description":"Get comprehensive current weather for a given city.","parameters":{"properties":{"city":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"description":"The name of the city to get the weather for (optional)."}},"type":"object"}},{"name":"get_weather_forecast","description":"Get weather forecast for a city.","parameters":{"properties":{"city":{"anyOf":[{"type":"string"},{"type":"null"}],"default":null,"description":"City name (optional - uses your default if not provided)."},"days":{"default":7,"description":"Number of days to forecast (1-16, default 7).","type":"integer"}},"type":"object"}}],"meta":{"description":"Comprehensive weather tool providing current conditions, forecasts, air quality, astronomy data, and more using Open-Meteo's free APIs.","manifest":{"title":"WeatherWeaver - Enhanced Weather Tool","author":"PureGrain at SLA Ops, LLC","author_url":"https://github.com/PureGrain","funding_url":"https://github.com/open-webui","version":"1.0.4","license":"MIT","required_open_webui_version":"0.3.9","description":"Enhanced weather tool with comprehensive data from Open-Meteo (free, no API key required)."}},"access_control":{},"updated_at":1760397871,"created_at":1760386467}]